@page
@model InfocommSolutionsProject.Pages.Product.IndexModel

@{
    ViewData["Title"] = "Index";
  
   
}

<h1>View Product</h1>
@if (User.IsInRole(InfocommSolutionsProject.Models.Roles.Admin))
{
    <p>
    <a asp-page="Create">Create New</a>
</p>
}
<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Name,Category and Description:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].DiscountStatus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].Discount)
            </th>
            <th>
               Image
            </th>
             <th>
                @Html.DisplayNameFor(model => model.Product[0].UpdatedOn)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Product) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DiscountStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Discount)
            </td>
            <td>
                @{ var ProductImagePath = "~/Images/ProductImages/" + (item.ImagePath ?? "noimage.jpg");}
                <img src="@ProductImagePath" asp-append-version="true" class="ProductImageIndexDisplay"
                width="150" 
                height="150"/>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedOn)
            </td>
          @if (User.IsInRole(InfocommSolutionsProject.Models.Roles.Admin))
{
            <td>
              
                <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
}
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.Product.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Product.HasNextPage ? "disabled" : "";

}
<a asp-page="./Index" asp-route-pageIndex="@(Model.Product.PageIndex - 1)" asp-route-currentFilter="@(Model.CurrentFilter)" class="btn btn-primary @prevDisabled">
Previous    
</a>
<a asp-page="./Index" asp-route-pageIndex="@(Model.Product.PageIndex + 1)" asp-route-currentFilter="@(Model.CurrentFilter)" class="btn btn-primary @nextDisabled">
Next    
</a>
