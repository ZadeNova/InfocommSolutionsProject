@page
@model InfocommSolutionsProject.Pages.Supplier.IndexModel

@{
    ViewData["Title"] = "Index";
 
}
<div class="container">
    <h1>Supplier </h1>

<p>
    <a asp-page="Create">Create New</a>
</p>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Supplier Name or Category :
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.suppler [0].SupplierName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.suppler[0].SupplierCategory)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.suppler) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.SupplierName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SupplierCategory)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.SupplierId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.SupplierId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.SupplierId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.suppler.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.suppler.HasNextPage ? "disabled" : "";

}


<a asp-page="./Index" asp-route-pageIndex="@(Model.suppler.PageIndex - 1)" asp-route-currentFilter="@(Model.CurrentFilter)" class="btn btn-primary @prevDisabled">
Previous    
</a>
<a asp-page="./Index" asp-route-pageIndex="@(Model.suppler.PageIndex + 1)" asp-route-currentFilter="@(Model.CurrentFilter)" class="btn btn-primary @nextDisabled">
Next    
</a>
  

</div>
