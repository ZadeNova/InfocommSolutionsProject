@page
@model InfocommSolutionsProject.Pages.AdminPageModel
@{
    ViewData["Title"] = "AdminHome";
    Layout = Layout;

}
@*<!DOCTYPE html>
<html>
  <head> 
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Dark Admin by Bootstrapious.com</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Choices.js-->
    <link rel="stylesheet" href="~/css/AdminCss/choices.min.css" >
    <!-- Google fonts - Muli-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:300,400,700">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="~/css/AdminCss/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="~/css/AdminCss/custom.css">
    <!-- Favicon-->
    <link rel="shortcut icon" href="img/favicon.ico">
    <!-- Tweaks for older IEs--><!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
  </head>*@
 <style>
     .ptagz{
         margin-top: 15px;

     }
 </style>

      <!-- Sidebar Navigation-->
      
      <div class="page-content">
            <!-- Page Header-->
            <div class="bg-dash-dark-2 py-4">
              <div class="container-fluid">
                <h2 class="h5 mb-0">Ecommerce Dashboard</h2>
              </div>
            </div>
        <section>
          <div class="container-fluid">
            <div class="row gy-4">
              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                          
                            <i class="fa-solid fa-truck"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Product Orders</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0 text-dash-color-1">@Model.NumberOfProductOrders</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="progress-bar bg-dash-color-1" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                          
                            <i class="fa-solid fa-calculator"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Number of Products</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0 text-dash-color-2">@Model.NumberOfProducts</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="progress-bar bg-dash-color-2" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                           
                            <i class="fa-solid fa-calculator"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Number of Suppliers</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0 text-dash-color-3">@Model.NumberOfSuppliers</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="progress-bar bg-dash-color-3" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                        
                            <i class="fa-solid fa-truck"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Supplier Orders</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0 text-dash-color-4">@Model.NumberOfSupplierOrders</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="progress-bar bg-dash-color-4" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                          
                            <i class="fa-solid fa-user"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Number of Users</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0" style="color:aqua">@Model.NumberOfUsersInWebApplication</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="" role="progressbar" style="width: 100%;background-color:aqua" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>

               <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                       
                            <i class="fa-solid fa-sack-dollar"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Avg Sales per Order</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0" style="color:steelblue">$@Model.AveragePricePerOrder</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="" role="progressbar" style="width: 100%;background-color:steelblue" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>

               <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                          
                            <i class="fa-solid fa-sack-dollar"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Total Sales per Order</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0" style="color:goldenrod">$@Model.TotalSales</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="" role="progressbar" style="width: 100%;background-color:goldenrod" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-3 col-sm-6">
                <div class="card mb-0">
                  <div class="card-body">
                    <div class="d-flex align-items-end justify-content-between mb-2">
                      <div class="me-2">
                          
                            <i class="fa-solid fa-gift"></i>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0">Accounts with wishlist</p>
                      </div>
                      <p class="text-xxl lh-1 mb-0" style="color:hotpink">@Model.Accounts_That_Have_Wishlist</p>
                    </div>
                    <div class="progress" style="height: 3px">
                      <div class="" role="progressbar" style="width: 100%;background-color:hotpink" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>

            </div>

          </div>
          
        </section>
     
            
         
        <section class="pt-0">
          <div class="container-fluid">
            <div class="row gy-4">
              <div class="col-lg-4">
                <div class="card">
                  <div class="card-body">
                      <div class="postion-relative text-center">
                          <canvas id="CategorySalesPieChart"></canvas>
                          <div class="position-absolute top-50 start-50 translate-middle"><strong class="text-lg d-block">$@Model.TotalSales</strong><span class="d-block">Sales</span></div>
                      </div>
                  </div>
                </div>
                <div class="card">
                  <div class="card-body">
                     <canvas id="CategoryPieChart"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-lg-8">
                <div class="card">
                  <div class="card-body">
                    <canvas id="ProdUserChart"></canvas>
                    <br />
                   <div class="btn-group" role="group" aria-label="Basic example">
                      <button id="tdybtn" type="button" class="btn btn-secondary" value="Today" onclick="FilterDate(this)">Today</button>
                      <button type="button" class="btn btn-secondary" value="Yesterday" onclick="FilterDate(this)">Yesterday</button>
                      <button type="button" class="btn btn-secondary" value="Last 7 Days" onclick="FilterDate(this)">Last 7 Days</button>
                      <button type="button" class="btn btn-secondary" value="Last 28 Days" onclick="FilterDate(this)">Last 28 Days</button>
                      <button type="button" class="btn btn-secondary" value="This Year" onclick="FilterDate(this)">This Year</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>


        <section class="pt-0">
          <div class="container-fluid">
               <div class="btn-group" role="group" aria-label="Basic example">
                      <button id="tdybtn" type="button" class="btn btn-secondary" value="Today" onclick="DateFilterForChart(this)">Today</button>
                      <button id="yestbtn" type="button" class="btn btn-secondary" value="Yesterday" onclick="DateFilterForChart(this)">Yesterday</button>
                      <button id="7daybtn"  type="button" class="btn btn-secondary" value="Last 7 Days" onclick="DateFilterForChart(this)">Last 7 Days</button>
                      <button id="28daybtn"  type="button" class="btn btn-secondary" value="Last 28 Days" onclick="DateFilterForChart(this)">Last 28 Days</button>
                      <button id="Yearbtn"  type="button" class="btn btn-secondary" value="This Year" onclick="DateFilterForChart(this)">This Year</button>
                    </div>
            <div class="row gy-4">
              <div class="col-lg-6">
                <div class="card">
                  <div class="card-body">
                      <canvas id="LineChartSales"></canvas>
                  </div>
                </div>
                <div class="card">
                  <div class="card-body">
                      <canvas id="SalesOverTimeChart"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-lg-6">
                <div class="card">
                  <div class="card-body">
                    <canvas id="LineChartCategoryQuantity"></canvas>
                    <br />
                  
                  </div>
                </div>
                <div class="card">
                  <div class="card-body">
                    <h1 class="text-xxl lh-1 mb-0" style="color:DarkOrange">Statistics</h1>
                    <br />
                    <div>
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="stats_sales">Total Sales For Today: $@Math.Round(Model.SalesOverTime_Today.Sum(x => x.Value),2)</p>
                        
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="cat1">Total Herbs Category Sales for Today: $@Math.Round(Model.Herbs_Quantity_Over_Today.Sum(x => x.Value),2)</p>

                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="cat2">Total Vegetable Category Sales for Today: $@Math.Round(Model.Vegetable_SalesOver_Today.Sum(x => x.Value),2)</p>
                        
                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="cat3">Total Fruits Category Sales for Today: $@Math.Round(Model.Fruits_SalesOver_Today.Sum(x => x.Value),2)</p>

                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="catunit1">Herbs Category Units sold Today: @Model.Herbs_Quantity_Over_Today.Sum(x => x.Value)</p>

                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="catunit2">Vegetable Category Units sold Today: @Model.Vegetable_Quantity_Over_Today.Sum(x => x.Value)</p>

                        <p class="text-sm text-uppercase text-gray-600 lh-1 mb-0 ptagz" id="catunit3">Fruits Category Units sold Today: @Model.Fruits_Quantity_Over_Today.Sum(x => x.Value)</p>



                    </div>
                   


                    
                  
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        <section class="pt-0">
          <div class="container-fluid">
            <div class="row gy-4">
            
              <div class="col-lg-8">
                <div class="card">
                  <div class="card-body">
                    <h3 class="h4 mb-3">Latest Orders</h3>
                       <table class="table">
                              <thead>
                                <tr>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].User_Account)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].Price_OfOrder)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].Product)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].Category)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].DateOf_Order)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].Order_Status)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.Top_8_LatestOrders[0].Notes)</th>
                                </tr>
                              </thead>
                              <tbody>
                                  @foreach(var item in @Model.Top_8_LatestOrders){

                                        <tr>
                                          <td>@Html.DisplayFor(modelItem => item.User_Account.Email)</td>
                                          <td>$@Html.DisplayFor(modelItem => item.Price_OfOrder)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Product.Name)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Category)</td>
                                          <td>@Html.DisplayFor(modelItem => item.DateOf_Order)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Order_Status)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Notes)</td>
                                        </tr>

                                  }
                               
                              </tbody>
                       </table>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="card">
                  <div class="card-body" id="BestsellerTable">
                    <h3 class="h4 mb-3">BestSellers</h3>
                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                      <button type="button" class="btn btn-secondary" id="quantitybtn" onclick="BestSellerFilter(this)" value="Quantity">By Quantity</button>
                      <button type="button" class="btn btn-secondary" id="amountbtn" onclick="BestSellerFilter(this)" value="Amount">By Sales</button>
                    </div>
                     <table class="table" id="tableprodbestseller">
                          <thead>
                              <tr>

                              <th>Product</th>
                              <th>Units</th>
                              <th>Sales</th>

                              </tr>
                              
                          </thead>
                          <tbody id="ProductBestSellersTableBody">

                          </tbody>
                      </table>
                  </div>
                </div>
              </div>

             
            </div>
          </div>
        </section>
        <section class="pt-0">
          <div class="container-fluid">
            <div class="row gy-4">

   
            
           
            </div>
          </div>
        </section>
       
        <section class="pt-0">
          <div class="container-fluid">
            <div class="row gy-4">
              <div class="col-lg-8">
                <div class="card">
                  <div class="card-body">
                    <h3 class="h4 mb-3">Latest Reviews</h3>
                        <table class="table">
                              <thead>
                                <tr>
                                  <th scope="col">@Html.DisplayNameFor(model => model.LatestRatings[0].Accounts)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.LatestRatings[0].Description)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.LatestRatings[0].rating)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.LatestRatings[0].Product.Name)</th>
                                  <th scope="col">@Html.DisplayNameFor(model => model.LatestRatings[0].CreatedOn)</th>
                                </tr>
                              </thead>
                              <tbody>
                                  @foreach(var item in @Model.LatestRatings){

                                        <tr>
                                          <td>@Html.DisplayFor(modelItem => item.Accounts.Email)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Description)</td>
                                          <td>@Html.DisplayFor(modelItem => item.rating)</td>
                                          <td>@Html.DisplayFor(modelItem => item.Product.Name)</td>
                                          <td>@Html.DisplayFor(modelItem => item.CreatedOn)</td>
                                          
                                        </tr>

                                  }
                               
                              </tbody>
                       </table>
                    
                  </div>
                </div>
              </div>
              <div class="col-lg-4">                                           
                <div class="card">
                  <div class="card-body">
                    <h3 class="h4 mb-3">Top Customers</h3>
                    @foreach(var cust in Model.TopCustomers){


                        <a class="d-block d-flex align-items-center text-reset text-decoration-none bg-dash-dark-2 py-2 px-3" href="#"> 
                      <div class="position-relative"><img class="avatar" src="~/Images/AdminPageImages/ProfilePic.png" alt="">@*<span class="availability-status bg-success"></span>*@</div>
                      <div class="ms-3">
                        <p class="fw-bold mb-0">@cust.Key.Email</p>
                        <p class="text-sm fw-light mb-0">Total amount spent</p>
                        <p class="small fw-light mb-0">$@cust.Value</p>
                      </div></a>

                    }
                    
                    
                    
                      
                    
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
       
        <!-- Page Footer-->
        
      </div>
    
    <!-- JavaScript files-->

    @*<script src="~/js/AdminPageJs/bootstrap.min.js"></script>
    <script src="vendor/just-validate/js/just-validate.min.js"></script>
    <script src="~/js/AdminPageJs/Chart.min.js"></script>
    <script src="~/js/AdminPageJs/choices.min.js"></script>
    <script src="~/js/AdminPageJs/charts-home.js"></script>
    <!-- Main File-->
    <script src="~/js/AdminPageJs/front.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.js" integrity="sha512-ZV3aKX6eFgm3To1hmxEyuh4dLtR1ovVeiz0auNstFXOcuwIcC6rBHGUP2lAmdUZb66yBj/mVborw4HhDkbvrhw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.min.js" integrity="sha512-F+u8eWHrfY8Xw9BLzZ8rG/0wIvs0y+JyRJrXjp3VjtFPylAEEGwKbua5Ip/oiVhaTDaDs4eU2Xtsxjs/9ag2bQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/AdminPageJs/AdminPageCharts/AdminHomePageCharts.js"></script>
    <script>
    
    var ListDateSpec = [
                    "12:00AM",
                    "01:00AM",
                    "02:00AM",
                    "03:00AM",
                    "04:00AM",
                    "05:00AM",
                    "06:00AM",
                    "07:00AM",
                    "08:00AM",
                    "09:00AM",
                    "10:00AM",
                    "11:00AM",
                    "12:00PM",
                    "01:00PM",
                    "02:00PM",
                    "03:00PM",
                    "04:00PM",
                    "05:00PM",
                    "06:00PM",
                    "07:00PM",
                    "08:00PM",
                    "09:00PM",
                    "10:00PM",
                    "11:00PM",
                ]

    var ListOfDates = @Html.Raw(Json.Serialize(Model.UserDateList))
    console.log(ListOfDates)
    

    

    const TheProdUserChart = document.getElementById("ProdUserChart");
    var TheLineChart = new Chart(document.getElementById("ProdUserChart"), {
        type: "line",
        options: {

            plugins: {
                title: {
                    display: true,
                    text: 'Number of Users Registered',
                    fontColor: 'white',
                }
            },
            scales: {
                xAxes: [
                    {
                        display: true,
                        gridLines: {
                            display: false,
                        },
                    },
                ],
                yAxes: [
                    {
                        ticks: {
                            
                            min: 0,
                            stepSize: 5,
                        },
                        display: true,
                        gridLines: {
                            display: false,
                        },
                    },
                ],
            },
            legend: {
                display: true,
            },
            responsive: true,
            animation: {
                //duration: speed * 1.5,
                easing: 'linear'
            },
        },
        data: {
            labels: ListDateSpec,
            datasets: [
                {
                    label: "Number Of Users Registered",
                    fill: true,
                    lineTension: 0.3,
                    backgroundColor: "transparent",
                    borderColor: "#57DECE",
                    pointBorderColor: "#57DECE",
                    pointHoverBackgroundColor: "#57DECE",
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: "miter",
                    borderWidth: 2,
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 5,
                    pointHoverRadius: 5,
                    pointHoverBorderColor: "#fff",
                    pointHoverBorderWidth: 2,
                    pointRadius: 1,
                    pointHitRadius: 0,
                    data: [],
                    spanGaps: false,
                }
            ]
        }
    })
    ListDateSpec = [
                    "00:00",
                    "01:00",
                    "02:00",
                    "03:00",
                    "04:00",
                    "05:00",
                    "06:00",
                    "07:00",
                    "08:00",
                    "09:00",
                    "10:00",
                    "11:00",
                    "12:00",
                    "13:00",
                    "14:00",
                    "15:00",
                    "16:00",
                    "17:00",
                    "18:00",
                    "19:00",
                    "20:00",
                    "21:00",
                    "22:00",
                    "23:00",
                ]
                var IndexArray = []
                var DateComparison = []
                var TodaysDate = new Date().toDateString()
                var CompareDatesToday = ListOfDates.map(x => new Date(x).toDateString())
                for (let i = 0; i < CompareDatesToday.length; i++) {
                    if (CompareDatesToday[i] === TodaysDate) {
                        IndexArray.push(i)
                    }
                    
                    
                }
                console.log(CompareDatesToday)
                console.log(TodaysDate)
                console.log(IndexArray)
                
                for (let i in IndexArray) {
                    
                    DateComparison.push(ListOfDates[IndexArray[i]])
                }

                let ToTime = DateComparison.map(x => new Date(x).toTimeString().slice(0,8))

                console.log(DateComparison)
                console.log("looool")
                console.log(ToTime)
                //var TestingArray = ['20:00:00' , '21:00:00' , '20:00:00']
                

                var ArrayObj = []
                
                var CleanedArry = ToTime.map(l => l.slice(0,2))

                for (let i = 0; i < ListDateSpec.length; i++){
                    ArrayObj.push({Time:ListDateSpec[i].slice(0,2) , Number:0})
                }
                console.log(ArrayObj)
                console.log("array obj")
                for (var key in ArrayObj){
                    if (CleanedArry.includes( ArrayObj[key].Time)) 
                    {
                        var Lol = CleanedArry.filter((element) => { return element ===  ArrayObj[key].Time })
                         ArrayObj[key].Number = Lol.length
                        
                        
                    }
                    else {
                         ArrayObj[key].Number = 0;
                        
                    }
                    
                }
                
                

                // Update Chart!
                TheLineChart.data.datasets[0].data = ArrayObj.map(x => x.Number)
                TheLineChart.data.labels = ListDateSpec
                TheLineChart.update()
    
    FilterDate = (btn) => {
        ListDateSpec = [] // Clear Array
        var ProdUserDateChart = new Date() // Reset to current date
        switch (btn.value) {
            case "Today":
                console.log("hi today")
                
                ListDateSpec = [
                    "00:00",
                    "01:00",
                    "02:00",
                    "03:00",
                    "04:00",
                    "05:00",
                    "06:00",
                    "07:00",
                    "08:00",
                    "09:00",
                    "10:00",
                    "11:00",
                    "12:00",
                    "13:00",
                    "14:00",
                    "15:00",
                    "16:00",
                    "17:00",
                    "18:00",
                    "19:00",
                    "20:00",
                    "21:00",
                    "22:00",
                    "23:00",
                ]
                var IndexArray = []
                var DateComparison = []
                var TodaysDate = new Date().toDateString()
                var CompareDatesToday = ListOfDates.map(x => new Date(x).toDateString())
                for (let i = 0; i < CompareDatesToday.length; i++) {
                    if (CompareDatesToday[i] === TodaysDate) {
                        IndexArray.push(i)
                    }
                    
                    
                }
                console.log(CompareDatesToday)
                console.log(TodaysDate)
                console.log(IndexArray)
                
                for (let i in IndexArray) {
                    
                    DateComparison.push(ListOfDates[IndexArray[i]])
                }

                let ToTime = DateComparison.map(x => new Date(x).toTimeString().slice(0,8))

                console.log(DateComparison)
                console.log("looool")
                console.log(ToTime)
                //var TestingArray = ['20:00:00' , '21:00:00' , '20:00:00']
                

                var ArrayObj = []
                
                var CleanedArry = ToTime.map(l => l.slice(0,2))

                for (let i = 0; i < ListDateSpec.length; i++){
                    ArrayObj.push({Time:ListDateSpec[i].slice(0,2) , Number:0})
                }
                console.log(ArrayObj)
                console.log("array obj")
                for (var key in ArrayObj){
                    if (CleanedArry.includes( ArrayObj[key].Time)) 
                    {
                        var Lol = CleanedArry.filter((element) => { return element ===  ArrayObj[key].Time })
                         ArrayObj[key].Number = Lol.length
                        
                        
                    }
                    else {
                         ArrayObj[key].Number = 0;
                        
                    }
                    
                }
                
                

                // Update Chart!
                TheLineChart.data.datasets[0].data = ArrayObj.map(x => x.Number)
                TheLineChart.data.labels = ListDateSpec
                TheLineChart.update()
                break;
            case "Yesterday":
                ListDateSpec = [
                    "00:00",
                    "01:00",
                    "02:00",
                    "03:00",
                    "04:00",
                    "05:00",
                    "06:00",
                    "07:00",
                    "08:00",
                    "09:00",
                    "10:00",
                    "11:00",
                    "12:00",
                    "13:00",
                    "14:00",
                    "15:00",
                    "16:00",
                    "17:00",
                    "18:00",
                    "19:00",
                    "20:00",
                    "21:00",
                    "22:00",
                    "23:00",
                ]
                var IndexArray = []
                var DateComparison = []
                var TodaysDate = new Date()
                var YesterdayDate = new Date(TodaysDate.setDate(TodaysDate.getDate() - 1)).toDateString()

                
                var CompareDatesToday = ListOfDates.map(x => new Date(x).toDateString())
                for (let i = 0; i < CompareDatesToday.length; i++){
                    
                    if (CompareDatesToday[i] === YesterdayDate){
                        IndexArray.push(i)
                    }

                }
                
                for (let i in IndexArray) {
                    
                    DateComparison.push(ListOfDates[IndexArray[i]])
                }
                
                let To_Time = DateComparison.map(x => new Date(x).toTimeString().slice(0,8))
                var ArrayObj = []
                
                var CleanedArry = To_Time.map(l => l.slice(0,2))

                for (let i = 0; i < ListDateSpec.length; i++){
                    ArrayObj.push({Time:ListDateSpec[i].slice(0,2) , Number:0})
                }

                for (var key in ArrayObj){
                    if (CleanedArry.includes( ArrayObj[key].Time)) 
                    {
                        var Lol = CleanedArry.filter((element) => { return element ===  ArrayObj[key].Time })
                        ArrayObj[key].Number = Lol.length
                        
                        
                    }
                    else {
                         ArrayObj[key].Number = 0;
                        
                    }
                    
                }

                console.log(ArrayObj)
                console.log(IndexArray)
                    
               

                // Update chart!
                TheLineChart.data.datasets[0].data = ArrayObj.map(x => x.Number)
                TheLineChart.data.labels = ListDateSpec
                TheLineChart.update()

                console.log("yesttt")
                break;

            case "Last 7 Days":
                var TheNewList = []
                for (let i = 0; i < 7; i++){
                    
                    TheNewList.push({Date: new Date(ProdUserDateChart.setDate(ProdUserDateChart.getDate() - 1)).toDateString(), Number:0})
                    
                }
                
                console.log(TheNewList);
                
                var TheNewListDate = ListOfDates
                TheNewListDate = TheNewListDate.map(x => new Date(x).toDateString())

                for (var key in TheNewList){
                    if (TheNewListDate.includes(TheNewList[key].Date)) 
                    {
                        var Lol = TheNewListDate.filter((element) => { return element === TheNewList[key].Date })
                        TheNewList[key].Number = Lol.length
                        
                        
                    }
                    else {
                        TheNewList[key].Number = 0;
                        
                    }
                    
                }

               
                // Update chart!
                TheLineChart.data.datasets[0].data = TheNewList.map(x => x.Number)
                TheLineChart.data.labels = TheNewList.map(a => a.Date)
                TheLineChart.update()
                console.log("Chart Updated!")
                break;



            case "Last 28 Days":
                let TheMainList = []
                let DatesRegistered = []
                for (let i = 0; i < 28; i++){
                    TheMainList.push({Date: new Date(ProdUserDateChart.setDate(ProdUserDateChart.getDate() - 1)).toDateString(), Number:0})
                    
                }
                DatesRegistered = ListOfDates
                DatesRegistered = DatesRegistered.map(x => new Date(x).toDateString())
                
                for (var key in TheMainList){
                    if (DatesRegistered.includes(TheMainList[key].Date)){
                        var num = DatesRegistered.filter((element) => {return element === TheMainList[key].Date })
                        TheMainList[key].Number = num.length
                    }
                    else{
                        TheMainList[key].Number = 0
                    }
                }

                // Update chart!
                TheLineChart.data.datasets[0].data = TheMainList.map(x => x.Number)
                TheLineChart.data.labels = TheMainList.map(a => a.Date)
                TheLineChart.update()
                
                break;
            case "This Year":
                console.log("tis year xd")
                ListDateSpec = 
                [
                    "January","February","March","April","May","June","July","August","September","October","November","December"
                ]
                YearObjsArray = []
                console.log(ListOfDates)
                let TheMonthsArrayUser = ListOfDates.map(x => ListDateSpec[new Date(x).getMonth()])
                for (let i = 0; i < ListDateSpec.length; i++) {
                    YearObjsArray.push({Month:ListDateSpec[i] , Number: 0})

                }
                console.log(YearObjsArray)
                console.log(TheMonthsArrayUser)
                for (var key in YearObjsArray){
                    if (TheMonthsArrayUser.includes(YearObjsArray[key].Month)) {
                        let temp = TheMonthsArrayUser.filter((element) => {return element === YearObjsArray[key].Month })
                        YearObjsArray[key].Number = temp.length;
                    }
                    else{

                        YearObjsArray[key].Number = 0;
                    }
                }






                // Update Chart!
                TheLineChart.data.datasets[0].data = YearObjsArray.map(x => x.Number)
                TheLineChart.data.labels = ListDateSpec
                TheLineChart.update()


                break;
             default:
                console.log("the default value")
        }
    }


    var Top_Quantity_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byQuantity))
    var Top_ByAmount_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byAmount))
    
    //var size = Object.keys(OrderList_ByQuantity).length
    var ProductList = []

    console.log(Top_Quantity_Products);
    console.log(Top_ByAmount_Products);
    console.log("Testing var5555555");


    


    //for (let key in OrderList_ByQuantity) {
    //    ProductList.push({Product:key , Sales:OrderList_ByQuantity[key] , Amount:OrderList_ByAmount[key]})
    //}
    console.log(ProductList)
    console.log("Hiaaa")
    var prod_body = document.getElementById("ProductBestSellersTableBody")
    for (let i = 0; i < Top_Quantity_Products.length; i++) {
                    let row = document.createElement('tr')
                    let data1 = document.createElement('td')
                    let data2 = document.createElement('td')
                    let data3 = document.createElement('td')
                    data1.innerHTML = Top_Quantity_Products[i].ProductName
                    data2.innerHTML = Top_Quantity_Products[i].UnitsSold
                    data3.innerHTML = Top_Quantity_Products[i].Sales
                    row.appendChild(data1)
                    row.appendChild(data2)
                    row.appendChild(data3)

                    prod_body.append(row)
                }
                
    BestSellerFilter = (btn) => {
        
        
        switch (btn.value) {

            case document.getElementById("quantitybtn").value:
                $('#tableprodbestseller tbody tr').remove();
                var Top_Quantity_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byQuantity))
                var Top_ByAmount_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byAmount))
                
                
                
             

                for (let i = 0; i < Top_Quantity_Products.length; i++){

                    let row = document.createElement('tr')

                    let data1 = document.createElement('td')
                    let data2 = document.createElement('td')
                    let data3 = document.createElement('td')
                    data1.innerHTML = Top_Quantity_Products[i].ProductName
                    data2.innerHTML = Top_Quantity_Products[i].UnitsSold
                    data3.innerHTML = Top_Quantity_Products[i].Sales
                    row.appendChild(data1)
                    row.appendChild(data2)
                    row.appendChild(data3)

                    prod_body.append(row)
                }

                break;


            case document.getElementById("amountbtn").value:

                $('#tableprodbestseller tbody tr').remove(); // Clear the table

                var Top_Quantity_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byQuantity))
                var Top_ByAmount_Products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProducts_byAmount))
                
               
             
                for (let i = 0; i < Top_ByAmount_Products.length; i++){

                    let row = document.createElement('tr')

                    let data1 = document.createElement('td')
                    let data2 = document.createElement('td')
                    let data3 = document.createElement('td')
                    data1.innerHTML = Top_ByAmount_Products[i].ProductName
                    data2.innerHTML = Top_ByAmount_Products[i].UnitsSold
                    data3.innerHTML = Top_ByAmount_Products[i].Sales
                    row.appendChild(data1)
                    row.appendChild(data2)
                    row.appendChild(data3)

                    prod_body.append(row)
                }

                break;

        }


    }
    
    </script>
    <script>
        

    const CategoryPieChart = document.getElementById("CategoryPieChart");
    var PieChart_prodCategory = new Chart(CategoryPieChart, {
        type: "doughnut",
        options: {
            maintainAspectRatio: false,
            cutout:80,
            plugins: {
                title: {
                    display: true,
                    color: 'PaleGoldenRod',
                    
                    text: 'Number of Products sold Per Category',
                    font:{
                    size:14,
                }
                }
            },
            scales: {
                xAxes: [
                    {
                        display: false,
                        gridLines: {
                            color: "#eee",
                        },
                    },
                ],
                yAxes: [
                    {
                        display: false,
                        gridLines: {
                            color: "#eee",
                        },
                    },
                ],
            },
        },
        data: {
            labels: @Html.Raw(Json.Serialize(Model.TopCategories.Select(item => item.Key).ToList())),
            datasets: [
                {
                    label: "Data Set 1",
                    backgroundColor: [
                        "#b30000", "#7c1158", "#4421af", "#1a53ff", "#0d88e6", "#00b7c7", "#5ad45a", "#8be04e", "#ebdc78",
                    ],
                    hoverBackgroundColor: [
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                    ],
                    borderColor: [

                        
                        "#B8860B",
                        "#B8860B",
                        "#B8860B",
                        "#B8860B",
                        "#B8860B",
                        "#B8860B",
                        "#B8860B",
                        
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(Json.Serialize(Model.TopCategories.Select(item => item.Value).ToList())),
                }
                
            ],
        },
    });


    const CategorySales = document.getElementById("CategorySalesPieChart");
    var CategorySalesPieChart = new Chart(CategorySales, {
        type: "doughnut",
        options: {
            maintainAspectRatio: false,
            cutout:80,
            plugins: {
                title: {
                    display: true,
                    
                    text: 'Sales Per Category',
                    color: 'PaleGoldenRod',
                    font:{
                        size:14,
                    }
                }
            },
            scales: {
                xAxes: [
                    {
                        display: false,
                        
                        gridLines: {
                            color: "#eee",
                        },
                        
                    },
                ],
                yAxes: [
                    {
                        display: false,
                        gridLines: {
                            color: "#eee",
                        },
                    },
                ],
            },
        },
        data: {
            labels: @Html.Raw(Json.Serialize(Model.TopCategoriesBySales.Select(item => item.Key).ToList())),
            datasets: [
                {
                    label: "Data Set 1",
                    backgroundColor: [
                        "#1192e8",
                        "#9f1853",
                        "#ee538b",
                        "#fd7f6f",
                        "#b2e061",
                        "#fdcce5",
                        "#beb9db",
                    ],
                    hoverBackgroundColor: [
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                        "#OOBFFF",
                    ],
                    borderColor: [
                        "#DAA520",
                        "#DAA520",
                        "#DAA520",
                        "#DAA520",
                        "#DAA520",
                        "#DAA520",
                        "#DAA520",
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(Json.Serialize(Model.TopCategoriesBySales.Select(item => item.Value).ToList())),
                }
                
            ],
        },
    });


    

    </script>
    <script>

    var SalesToday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesOverTime_Today));

    var Herbs_SalesToday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_SalesOver_Today));
    var Vegetable_SalesToday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_SalesOver_Today));
    var Fruits_SalesToday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_SalesOver_Today));


    var Vegetable_Quantity_Today = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_Quantity_Over_Today));
    var Herbs_Quantity_Today = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_Quantity_Over_Today));
    var Fruits_Quantity_Today = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_Quantity_Over_Today));


    document.getElementById("stats_sales").innerHTML = "Total Sales For Today: $" + @Math.Round(Model.SalesOverTime_Today.Sum(x => x.Value));
    document.getElementById("cat1").innerHTML = "Total Herbs Category Sales Today: $" + @Math.Round(Model.Herbs_SalesOver_Today.Sum(x => x.Value));
    document.getElementById("cat2").innerHTML = "Total Vegetable Category Sales Today: $" + @Math.Round(Model.Vegetable_SalesOver_Today.Sum(x => x.Value)); 
    document.getElementById("cat3").innerHTML = "Total Fruits Category Sales Today: $" + @Math.Round(Model.Fruits_SalesOver_Today.Sum(x => x.Value));

    document.getElementById("catunit1").innerHTML = "Herbs Category Units sold Today:" + @Model.Herbs_Quantity_Over_Today.Sum(x => x.Value);
    document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold Today:" + @Model.Vegetable_Quantity_Over_Today.Sum(x => x.Value); 
    document.getElementById("catunit3").innerHTML = "Fruits Category Units sold Today:" + @Model.Fruits_Quantity_Over_Today.Sum(x => x.Value);
   

    const SalesOver_Time_Chart = document.getElementById("SalesOverTimeChart");
    var SalesOverTimeChart_Line = new Chart(SalesOver_Time_Chart, {
        type: "line",
        options: {
            plugins: {
                 title: {
                display:true,
                text: "Sales Over Time",
                color: 'PaleGoldenRod',
                font:{
                    size:14,
                },
                },
            },
            animation: {

               duration: 700,
               easing: 'linear'
            },
           
            scales: {
                xAxes: [
                    {   
                        
                        display: true,
                        gridLines: {
                            display: true,
                        },
                        
                    },
                ],
                yAxes: [
                    {
                        ticks: {
                            max: 40,
                            min: 10,
                            stepSize: 0.1,
                        },
                        display: false,
                        gridLines: {
                            display: true,
                        },
                    },
                ],
            },
            legend: {
                display: true,
                
            },
        },
        data: {
            labels: Object.keys(SalesToday),
            datasets: [
                {
                    label: "Sales Per Revenue ($)",
                    fill: true,
                    lineTension: 0.3,
                    backgroundColor: "transparent",
                    borderColor: "#EF8C99",
                    pointBorderColor: "#EF8C99",
                    pointHoverBackgroundColor: "#EF8C99",
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: "miter",
                    borderWidth: 2.5,
                    pointBackgroundColor: "#EF8C99",
                    pointBorderWidth: 3,
                    pointHoverRadius: 5,
                    pointHoverBorderColor: "#fff",
                    pointHoverBorderWidth: 0,
                    pointRadius: 2,
                    pointHitRadius: 0,
                    data: Object.values(SalesToday),
                    spanGaps: false,
                },
                
            ],
        },
    });

    

    const CategorySalesOverTime_Revenue = document.getElementById("LineChartSales");
    var LineChart_CategorySalesTime = new Chart(CategorySalesOverTime_Revenue, {
          type: 'line',
          data: {
            labels: Object.keys(Herbs_SalesToday),
            datasets: [{ 
                data: Object.values(Herbs_SalesToday),
                label: "Herbs Sales Revenue ($) ",
                borderColor: "#4deaef",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,
              }, { 
                data: Object.values(Vegetable_SalesToday),
                label: "Vegetable Sales Revenue ($)",
                borderColor: "#cbd629",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,
              },
              { 
                data: Object.values(Fruits_SalesToday),
                label: "Fruits Sales Revenue ($)",
                borderColor: "#228c67",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,
              },
            ]
          },
          options: {
              plugins: {
                  title: {
                       display: true,
                       color: 'PaleGoldenRod',
                       text: 'Revenue per Category Over Time',
                       font:{
                            size:14,
                        }
                    },
            },
              animation: {

               duration: 700,
               easing: 'linear'
            },
          }
        });

    const CategorySalesOverTime_Quantity = document.getElementById("LineChartCategoryQuantity");
    var LineChart_CategorySalesTime_Quantity = new Chart(CategorySalesOverTime_Quantity, {
          type: 'line',
          data: {
            labels: Object.keys(Herbs_Quantity_Today),
            datasets: [{ 
                data: Object.values(Herbs_Quantity_Today),
                label: "Herbs Unit Sales",
                borderColor: "#4deaef",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,
              }, { 
                data: Object.values(Vegetable_Quantity_Today),
                label: "Vegetable Unit Sales",
                borderColor: "#cbd629",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,

              },
              { 
                data: Object.values(Fruits_Quantity_Today),
                label: "Fruits Unit Sales",
                borderColor: "#228c67",
                fill: false,
                lineTension: 0.3,
                borderWidth: 2,

              },

            ]
          },
          options: {
              
              plugins: {
                  title: {
                       display: true,
                       color: 'PaleGoldenRod',
                       fontSize:20,
                       text: 'Number of Units sold Per Category',
                       font:{
                            size:14,
                        }
                    },
            },
            animation: {

               duration: 700,
               easing: 'linear'
            },
          }
        });

    DateFilterForChart = (btn) => {
            
        switch (btn.value) {
            case document.getElementById("tdybtn").value:

                // Update stats
                document.getElementById("stats_sales").innerHTML = "Total Sales For Today: $" + @Math.Round(Model.SalesOverTime_Today.Sum(x => x.Value));
                document.getElementById("cat1").innerHTML = "Total Herbs Category Sales Today: $" + @Math.Round(Model.Herbs_SalesOver_Today.Sum(x => x.Value));
                document.getElementById("cat2").innerHTML = "Total Vegetable Category Sales Today: $" + @Math.Round(Model.Vegetable_SalesOver_Today.Sum(x => x.Value)); 
                document.getElementById("cat3").innerHTML = "Total Fruits Category Sales Today: $" + @Math.Round(Model.Fruits_SalesOver_Today.Sum(x => x.Value));

                document.getElementById("catunit1").innerHTML = "Herbs Category Units sold Today:" + @Model.Herbs_Quantity_Over_Today.Sum(x => x.Value);
                document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold Today:" + @Model.Vegetable_Quantity_Over_Today.Sum(x => x.Value); 
                document.getElementById("catunit3").innerHTML = "Fruits Category Units sold Today:" + @Model.Fruits_Quantity_Over_Today.Sum(x => x.Value);
                //Updating Category units sold over time chart


                LineChart_CategorySalesTime_Quantity.data.datasets[0].data = Object.values(Herbs_Quantity_Today)
                LineChart_CategorySalesTime_Quantity.data.datasets[1].data = Object.values(Vegetable_Quantity_Today)
                LineChart_CategorySalesTime_Quantity.data.datasets[2].data = Object.values(Fruits_Quantity_Today)
                console.log(Fruits_Quantity_Today)
                console.log(Vegetable_Quantity_Today)
                LineChart_CategorySalesTime_Quantity.data.labels = Object.keys(Herbs_Quantity_Today)

                LineChart_CategorySalesTime_Quantity.update()

                // Updating Category Revenue Over Time Chart
                LineChart_CategorySalesTime.data.datasets[0].data = Object.values(Herbs_SalesToday)
                LineChart_CategorySalesTime.data.datasets[1].data = Object.values(Vegetable_SalesToday)
                LineChart_CategorySalesTime.data.datasets[2].data = Object.values(Fruits_SalesToday)

                LineChart_CategorySalesTime.data.labels = Object.keys(Herbs_SalesToday)
                LineChart_CategorySalesTime.update()
                // Updating Sales over time chart
                SalesOverTimeChart_Line.data.datasets[0].data = Object.values(SalesToday)
                SalesOverTimeChart_Line.data.labels = Object.keys(SalesToday)
                SalesOverTimeChart_Line.update()
                break;
            case document.getElementById("yestbtn").value:
                var SalesYesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesOverTime_Yesterday));

                var Herbs_SalesYesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_SalesOver_Yesterday));
                var Vegetable_SalesYesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_SalesOver_Yesterday));
                var Fruits_SalesYesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_SalesOver_Yesterday));

                var Herbs_Quantity_yesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_Quantity_Over_Yesterday));
                var Vegetable_Quantity_Yesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_Quantity_Over_Yesterday));
                var Fruits_Quantity_Yesterday = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_Quantity_Over_Yesterday));

                // Update stats
                document.getElementById("stats_sales").innerHTML = "Yesterday Total Sales: $" + @Math.Round(Model.SalesOverTime_Yesterday.Sum(x => x.Value),2);

                document.getElementById("cat1").innerHTML = "Yesterday Total Herbs Category Sales: $" + @Math.Round(Model.Herbs_SalesOver_Yesterday.Sum(x => x.Value));
                document.getElementById("cat2").innerHTML = "Yesterday Total Vegetable Category Sales: $" + @Math.Round(Model.Vegetable_SalesOver_Yesterday.Sum(x => x.Value)); 
                document.getElementById("cat3").innerHTML = "Yesterday Total Fruits Category Sales: $" + @Math.Round(Model.Fruits_SalesOver_Yesterday.Sum(x => x.Value));

                document.getElementById("catunit1").innerHTML = "Herbs Category Units sold Yesterday:" + @Model.Herbs_Quantity_Over_Yesterday.Sum(x => x.Value);
                document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold Yesterday:" + @Model.Vegetable_Quantity_Over_Yesterday.Sum(x => x.Value); 
                document.getElementById("catunit3").innerHTML = "Fruits Category Units sold Yesterday:" + @Model.Fruits_Quantity_Over_Yesterday.Sum(x => x.Value);
                
                //Updating Category units sold over time chart

                LineChart_CategorySalesTime_Quantity.data.datasets[0].data = Object.values(Herbs_Quantity_yesterday)
                LineChart_CategorySalesTime_Quantity.data.datasets[1].data = Object.values(Vegetable_Quantity_Yesterday)
                LineChart_CategorySalesTime_Quantity.data.datasets[2].data = Object.values(Fruits_Quantity_Yesterday)
                LineChart_CategorySalesTime_Quantity.data.labels = Object.keys(Herbs_Quantity_yesterday)

                LineChart_CategorySalesTime_Quantity.update()

                // Updating Category Revenue over time chart
                LineChart_CategorySalesTime.data.datasets[0].data = Object.values(Herbs_SalesYesterday)
                LineChart_CategorySalesTime.data.datasets[1].data = Object.values(Vegetable_SalesYesterday)
                LineChart_CategorySalesTime.data.datasets[2].data = Object.values(Fruits_SalesYesterday)
                LineChart_CategorySalesTime.data.labels = Object.keys(Herbs_SalesYesterday)

                LineChart_CategorySalesTime.update()

                // Updating sales over time chart
                SalesOverTimeChart_Line.data.datasets[0].data = Object.values(SalesYesterday)
                SalesOverTimeChart_Line.data.labels = Object.keys(SalesYesterday)
                SalesOverTimeChart_Line.update()
                break;
            case document.getElementById("7daybtn").value:
                // Seven days
                var SalesSevenDay = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesOverTime_7day));

                var HerbsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_SalesOver_7Day));
                var VegetableSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_SalesOver_7Day));
                var FruitsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_SalesOver_7Day));


                var Herbs_QuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_Quantity_Over_7Day));
                var Vegetable_QuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_Quantity_Over_7Day));
                var Fruits_QuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_Quantity_Over_7Day));


                // Update stats
                
                document.getElementById("stats_sales").innerHTML = "Total Sales For last 7 days: $" + @Math.Round(Model.SalesOverTime_7day.Sum(x => x.Value),2);

                document.getElementById("cat1").innerHTML = "Total Herbs Category Sales for last 7 days: $" + @Math.Round(Model.Herbs_SalesOver_7Day.Sum(x => x.Value));
                document.getElementById("cat2").innerHTML = "Total Vegetable Category Sales for last 7 days: $" + @Math.Round(Model.Vegetable_SalesOver_7Day.Sum(x => x.Value)); 
                document.getElementById("cat3").innerHTML = "Total Fruits Category Sales for last 7 days: $" + @Math.Round(Model.Fruits_SalesOver_7Day.Sum(x => x.Value));

                document.getElementById("catunit1").innerHTML = "Herbs Category Units sold last 7 days:" + @Model.Herbs_Quantity_Over_7Day.Sum(x => x.Value);
                document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold last 7 days:" + @Model.Vegetable_Quantity_Over_7Day.Sum(x => x.Value); 
                document.getElementById("catunit3").innerHTML = "Fruits Category Units sold last 7 days:" + @Model.Fruits_Quantity_Over_7Day.Sum(x => x.Value);


                //Updating Category units sold over time chart
                LineChart_CategorySalesTime_Quantity.data.datasets[0].data = Object.values(Herbs_QuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[1].data = Object.values(Vegetable_QuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[2].data = Object.values(Fruits_QuantityData)
                LineChart_CategorySalesTime_Quantity.data.labels = Object.keys(Herbs_QuantityData)

                LineChart_CategorySalesTime_Quantity.update()

                // Updating Category Revenue over time chart
                LineChart_CategorySalesTime.data.datasets[0].data = Object.values(HerbsSalesData)
                LineChart_CategorySalesTime.data.datasets[1].data = Object.values(VegetableSalesData)
                LineChart_CategorySalesTime.data.datasets[2].data = Object.values(FruitsSalesData)
                LineChart_CategorySalesTime.data.labels = Object.keys(HerbsSalesData)
                LineChart_CategorySalesTime.update()
                // Updating sales over time chart
                SalesOverTimeChart_Line.data.datasets[0].data = Object.values(SalesSevenDay)
                SalesOverTimeChart_Line.data.labels = Object.keys(SalesSevenDay)
                SalesOverTimeChart_Line.update()
                break;

            case document.getElementById("28daybtn").value:
                // Twenty Eight Days

                var SalesTwentyEightDay = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesOverTime_28Day));


                var HerbsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_SalesOver_28Day));
                var VegetableSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_SalesOver_28Day));
                var FruitsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_SalesOver_28Day));


                var HerbsQuantityData =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_Quantity_Over_28Day));
                var VegetableQuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_Quantity_Over_28Day));
                var FruitsQuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_Quantity_Over_28Day));


                // Update stats
                document.getElementById("stats_sales").innerHTML = "Total Sales For last 28 days: $" + @Math.Round(Model.SalesOverTime_28Day.Sum(x => x.Value),2);

                document.getElementById("cat1").innerHTML = "Total Herbs Category Sales for last 28 days: $" + @Math.Round(Model.Herbs_SalesOver_28Day.Sum(x => x.Value));
                document.getElementById("cat2").innerHTML = "Total Vegetable Category Sales for last 28 days: $" + @Math.Round(Model.Vegetable_SalesOver_28Day.Sum(x => x.Value)); 
                document.getElementById("cat3").innerHTML = "Total Fruits Category Sales for last 28 days: $" + @Math.Round(Model.Fruits_SalesOver_28Day.Sum(x => x.Value));
                
                document.getElementById("catunit1").innerHTML = "Herbs Category Units sold last 28 days:" + @Model.Herbs_Quantity_Over_28Day.Sum(x => x.Value);
                document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold last 28 days:" + @Model.Vegetable_Quantity_Over_28Day.Sum(x => x.Value); 
                document.getElementById("catunit3").innerHTML = "Fruits Category Units sold last 28 days:" + @Model.Fruits_Quantity_Over_28Day.Sum(x => x.Value);
                

                //Updating Category units sold over time chart
                LineChart_CategorySalesTime_Quantity.data.datasets[0].data = Object.values(HerbsQuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[1].data = Object.values(VegetableQuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[2].data = Object.values(FruitsQuantityData)
                LineChart_CategorySalesTime_Quantity.data.labels = Object.keys(HerbsQuantityData)

                LineChart_CategorySalesTime_Quantity.update()

                // Updating Category Revenue over time chart
                LineChart_CategorySalesTime.data.datasets[0].data = Object.values(HerbsSalesData)
                LineChart_CategorySalesTime.data.datasets[1].data = Object.values(VegetableSalesData)
                LineChart_CategorySalesTime.data.datasets[2].data = Object.values(FruitsSalesData)
                LineChart_CategorySalesTime.data.labels = Object.keys(HerbsSalesData)

                LineChart_CategorySalesTime.update()
                // Updating sales over time chart           
                SalesOverTimeChart_Line.data.datasets[0].data = Object.values(SalesTwentyEightDay)
                SalesOverTimeChart_Line.data.labels = Object.keys(SalesTwentyEightDay)

                SalesOverTimeChart_Line.update()
                
                break;
            case document.getElementById("Yearbtn").value:
                var MonthlySales = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesOverTime_Monthly));

                var HerbsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_SalesOver_Monthly));
                var VegetableSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_SalesOver_Monthly));
                var FruitsSalesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_SalesOver_Monthly));

                var HerbsQuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Herbs_Quantity_Over_Monthly));
                var VegetableQuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Vegetable_Quantity_Over_Monthly));
                var FruitsQuantityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Fruits_Quantity_Over_Monthly));

                // Update stats

                document.getElementById("stats_sales").innerHTML = "Total Sales entire year: $" + @Math.Round(Model.SalesOverTime_Monthly.Sum(x => x.Value),2);

                document.getElementById("cat1").innerHTML = "Total Herbs Category Sales for entire year: $" + @Math.Round(Model.Herbs_SalesOver_Monthly.Sum(x => x.Value));
                document.getElementById("cat2").innerHTML = "Total Vegetable Category Sales for entire year: $" + @Math.Round(Model.Vegetable_SalesOver_Monthly.Sum(x => x.Value)); 
                document.getElementById("cat3").innerHTML = "Total Fruits Category Sales for entire year: $" + @Math.Round(Model.Fruits_SalesOver_Monthly.Sum(x => x.Value));

                document.getElementById("catunit1").innerHTML = "Herbs Category Units sold for entire year:" + @Model.Herbs_Quantity_Over_Monthly.Sum(x => x.Value);
                document.getElementById("catunit2").innerHTML = "Vegetable Category Units sold for entire year:" + @Model.Vegetable_Quantity_Over_Monthly.Sum(x => x.Value); 
                document.getElementById("catunit3").innerHTML = "Fruits Category Units sold for entire year:" + @Model.Fruits_Quantity_Over_Monthly.Sum(x => x.Value);


                //Updating Category units sold over time chart
                LineChart_CategorySalesTime_Quantity.data.datasets[0].data = Object.values(HerbsQuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[1].data = Object.values(VegetableQuantityData)
                LineChart_CategorySalesTime_Quantity.data.datasets[2].data = Object.values(FruitsQuantityData)
                LineChart_CategorySalesTime_Quantity.data.labels = Object.keys(HerbsQuantityData)

                LineChart_CategorySalesTime_Quantity.update()


                // Updating Category Revenue over time chart
                LineChart_CategorySalesTime.data.datasets[0].data = Object.values(HerbsSalesData)
                LineChart_CategorySalesTime.data.datasets[1].data = Object.values(VegetableSalesData)
                LineChart_CategorySalesTime.data.datasets[2].data = Object.values(FruitsSalesData)
                LineChart_CategorySalesTime.data.labels = Object.keys(HerbsSalesData)
                LineChart_CategorySalesTime.update()
                // Updating sales over time chart
                SalesOverTimeChart_Line.data.datasets[0].data = Object.values(MonthlySales)
                SalesOverTimeChart_Line.data.labels = Object.keys(MonthlySales)
                SalesOverTimeChart_Line.update()
                break;

        }




        } 

    

    </script>